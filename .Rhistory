geom_hline(yintercept = 0, col = "grey")+
theme_classic() +
theme(axis.line.y = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.x = element_text(angle = 90),
legend.position = "none",
plot.margin = margin(t = 0, r = 0, b = 0, l = 0, unit = "pt"))
}
gg_plungedistinct(1, letter = "K",box = "no")
ggtreeplot(gg_tr, subset(longdfplotting,
longdfplotting$earmeasuresresid==yvarnames[index2]), aes(y=earmeasureval), flip=TRUE) +
geom_point(aes(), size = 2,shape = 21, col = "black")
ggtreeplot <- function(ggtree, data = NULL, mapping = aes(), flip=FALSE,
expand_limits=expand_scale(0,.6), ...){
if(!inherits(ggtree, "ggtree"))
stop("not a ggtree object")
# match the tree limits
limits <- tree_ylim(ggtree)+#JZ added
limits[1] <- limits[1] + (limits[1] * expand_limits[1]) - expand_limits[2]
limits[2] <- limits[2] + (limits[2] * expand_limits[3]) + expand_limits[4]
if(flip){
mapping <- modifyList(aes_(x=~x), mapping)
data <- mutate(data, x=tree_y(ggtree, data))
gg <- ggplot(data=data, mapping = mapping, ...) +
scale_x_continuous(limits=limits, expand=c(0,0))
}else{
mapping <- modifyList(aes_(y=~y), mapping)
data <- mutate(data, y=tree_y(ggtree, data))
gg <- ggplot(data=data, mapping = mapping, ...) +
scale_y_continuous(limits=limits, expand=c(0,0))
}
gg
}
ggtreeplot(gg_tr, subset(longdfplotting,
longdfplotting$earmeasuresresid==yvarnames[index2]), aes(y=earmeasureval), flip=TRUE) +
geom_point(aes(), size = 2,shape = 21, col = "black")
ggtreeplot <- function(ggtree, data = NULL, mapping = aes(), flip=FALSE,
expand_limits=expand_scale(0,.6), ...){
if(!inherits(ggtree, "ggtree"))
stop("not a ggtree object")
# match the tree limits
limits <- tree_ylim(ggtree)+#JZ added
limits[1] <- limits[1] + (limits[1] * expand_limits[1]) - expand_limits[2]
limits[2] <- limits[2] + (limits[2] * expand_limits[3]) + expand_limits[4]
if(flip){
mapping <- modifyList(aes_(x=~x), mapping)
data <- mutate(data, x=tree_y(ggtree, data))
gg <- ggplot(data=data, mapping = mapping, ...) +
scale_x_continuous(limits=limits, expand=c(0,0))
}else{
mapping <- modifyList(aes_(y=~y), mapping)
data <- mutate(data, y=tree_y(ggtree, data))
gg <- ggplot(data=data, mapping = mapping, ...) +
scale_y_continuous(limits=limits, expand=c(0,0))
}
gg
}
ggtreeplot(gg_tr, subset(longdfplotting,
longdfplotting$earmeasuresresid==yvarnames[index2]), aes(y=earmeasureval), flip=TRUE) +
geom_point(aes(), size = 2,shape = 21, col = "black")
ggtreeplot(gg_tr, subset(longdfplotting,
longdfplotting$earmeasuresresid==yvarnames[index2]), aes(y=earmeasureval), flip=TRUE) +
geom_point(aes(), size = 2,shape = 21, col = "black")
ggtreeplot <- function(ggtree, data = NULL, mapping = aes(), flip=FALSE,
expand_limits=expand_scale(0,.6), ...){
if(!inherits(ggtree, "ggtree"))
stop("not a ggtree object")
# match the tree limits
limits <- tree_ylim(ggtree)+#JZ added
limits[1] <- limits[1] + (limits[1] * expand_limits[1]) - expand_limits[2]
limits[2] <- limits[2] + (limits[2] * expand_limits[3]) + expand_limits[4]
if(flip){
mapping <- modifyList(aes_(x=~x), mapping)
data <- mutate(data, x=tree_y(ggtree, data))
gg <- ggplot(data=data, mapping = mapping, ...) +
scale_x_continuous(limits=limits, expand=c(0,0))
}else{
mapping <- modifyList(aes_(y=~y), mapping)
data <- mutate(data, y=tree_y(ggtree, data))
gg <- ggplot(data=data, mapping = mapping, ...) +
scale_y_continuous(limits=limits, expand=c(0,0))
}
gg
}
ggtreeplot(gg_tr, subset(longdfplotting,
longdfplotting$earmeasuresresid==yvarnames[index2]), aes(y=earmeasureval), flip=TRUE) +
geom_point(aes(), size = 2,shape = 21, col = "black")
tree_ylim(ggtree)
tree_ylim(orderPhy)
tree_ylim(ggtree(orderPhy))
tree_ylim <- function(ggtree){
if(!inherits(ggtree, "ggtree"))
stop("not a ggtree object")
range(ggtree$data$y)
}
# plot data next to a ggtree aligned by shared labels
ggtreeplot <- function(ggtree, data = NULL, mapping = aes(), flip=FALSE,
expand_limits=expand_scale(0,.6), ...){
if(!inherits(ggtree, "ggtree"))
stop("not a ggtree object")
# match the tree limits
limits <- tree_ylim(ggtree)+#JZ added
limits[1] <- limits[1] + (limits[1] * expand_limits[1]) - expand_limits[2]
limits[2] <- limits[2] + (limits[2] * expand_limits[3]) + expand_limits[4]
if(flip){
mapping <- modifyList(aes_(x=~x), mapping)
data <- mutate(data, x=tree_y(ggtree, data))
gg <- ggplot(data=data, mapping = mapping, ...) +
scale_x_continuous(limits=limits, expand=c(0,0))
}else{
mapping <- modifyList(aes_(y=~y), mapping)
data <- mutate(data, y=tree_y(ggtree, data))
gg <- ggplot(data=data, mapping = mapping, ...) +
scale_y_continuous(limits=limits, expand=c(0,0))
}
gg
}
# get rid of superfluous axis - this works after coord_flip, so it also works
# for the rotated histogram
no_y_axis <- function ()
theme(axis.line.y = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
#ggsave("img/ggtree-composite-1.png", type='cairo', width=8, height=4)
#
#gg_tr <- ggtree(tr) + geom_tiplab(align=TRUE) +
#  scale_x_continuous(expand=expand_scale(0.2)) + # make more room for the labels
#  scale_y_tree()
#gg_hist <- ggtreeplot(gg_tr, df1, aes(y=value), flip=TRUE) +
#  geom_col(aes(fill=substr(label, 1, 1))) + no_legend() +
#  coord_flip() + no_y_axis()
#gg_heat <- ggtreeplot(gg_tr, df2, aes(x=category)) + geom_tile(aes(fill=value)) +
#  scale_fill_gradient2() + no_legend() + no_y_axis()
#
#gg_tr + gg_hist + gg_heat + plot_annotation(tag_levels="A")
#
#ggsave("img/ggtree-composite-3.png", type='cairo', width=8, height=4)
gg_plungedistinct<-function(index2, letter, box = "yes"){
ggtreeplot(gg_tr, subset(longdfplotting,
longdfplotting$earmeasuresresid==yvarnames[index2]), aes(y=earmeasureval), flip=TRUE) +
geom_point(aes(), size = 2,shape = 21, col = "black")+
scale_fill_manual(values = cbbPalette)+
coord_flip() + no_y_axis()+
ylab("")+
#xlim(-3.5,26.5)+
geom_hline(yintercept = 0, col = "grey")+
theme_classic() +
theme(axis.line.y = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.x = element_text(angle = 90),
legend.position = "none",
plot.margin = margin(t = 0, r = 0, b = 0, l = 0, unit = "pt"))
}
gg_plungedistinct(1, letter = "K",box = "no")
library(ggtree)
library(patchwork)
# a tree
#set.seed(1338)tr <- rtree(10)
# and some dummy data
#df1 <- tibble(
#  # only some labels match
#  label = c(tr$tip.label[sample(6, 6)], "u9", "v9"),
#  value = label %>% str_sub(2) %>% as.numeric)
#df2 <- tibble(
#  label = rep(tr$tip.label, 4),
#  category = rep(1:4, each=10),
#  value = rnorm(40, 0, 3))
no_legend <- function() theme(legend.position="none")
# plot the tree,
#gg_tr <- ggtree(tr) + geom_tiplab(align=TRUE) +
#  scale_x_continuous(expand=expand_scale(0.2)) # make more room for the labels
## the data points, the histogram and the heatmap
#gg_hist <- ggplot(df1, aes(label, value)) +
#  geom_col(aes(fill=substr(label, 1, 1))) + no_legend()
#gg_heat <- ggplot(df2, aes(category, label)) + geom_tile(aes(fill=value)) +
#  scale_fill_gradient2() + no_legend()
#
#gg_tr + gg_hist + gg_heat + plot_annotation(tag_levels="A")
tree_y <-  function(ggtree, data){
if(!inherits(ggtree, "ggtree"))
stop("not a ggtree object")
left_join(select(data, label), select(ggtree$data, label, y)) %>%
pull(y)
}
# replot histogram and heatmap, match the y-coords to the tree
#gg_hist <- ggplot(df1, aes(tree_y(gg_tr, df1), value)) +
#  geom_col(aes(fill=substr(label, 1, 1))) + no_legend() +
#  coord_flip() # flip this plot
#gg_heat <- ggplot(df2, aes(category, y=tree_y(gg_tr, df2))) +
#  geom_tile(aes(fill=value)) +
#  scale_fill_gradient2() + no_legend()
#
#gg_tr + gg_hist + gg_heat + plot_annotation(tag_levels="A")
#
#ggsave("img/ggtree-composite-2.png", type='cairo', width=8, height=4)
# overwrite the default expand for continuous scales
scale_y_tree <- function(expand=expand_scale(0, 0.6), ...){
scale_y_continuous(expand=expand, ...)
}
# get the range of the ggtree y-axis data
tree_ylim <- function(ggtree){
if(!inherits(ggtree, "ggtree"))
stop("not a ggtree object")
range(ggtree$data$y)
}
# plot data next to a ggtree aligned by shared labels
ggtreeplot <- function(ggtree, data = NULL, mapping = aes(), flip=FALSE,
expand_limits=expand_scale(0,.6), ...){
if(!inherits(ggtree, "ggtree"))
stop("not a ggtree object")
# match the tree limits
limits <- tree_ylim(ggtree)#JZ added
limits[1] <- limits[1] + (limits[1] * expand_limits[1]) - expand_limits[2]
limits[2] <- limits[2] + (limits[2] * expand_limits[3]) + expand_limits[4]
if(flip){
mapping <- modifyList(aes_(x=~x), mapping)
data <- mutate(data, x=tree_y(ggtree, data))
gg <- ggplot(data=data, mapping = mapping, ...) +
scale_x_continuous(limits=limits, expand=c(0,0))
}else{
mapping <- modifyList(aes_(y=~y), mapping)
data <- mutate(data, y=tree_y(ggtree, data))
gg <- ggplot(data=data, mapping = mapping, ...) +
scale_y_continuous(limits=limits, expand=c(0,0))
}
gg
}
# get rid of superfluous axis - this works after coord_flip, so it also works
# for the rotated histogram
no_y_axis <- function ()
theme(axis.line.y = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
#ggsave("img/ggtree-composite-1.png", type='cairo', width=8, height=4)
#
#gg_tr <- ggtree(tr) + geom_tiplab(align=TRUE) +
#  scale_x_continuous(expand=expand_scale(0.2)) + # make more room for the labels
#  scale_y_tree()
#gg_hist <- ggtreeplot(gg_tr, df1, aes(y=value), flip=TRUE) +
#  geom_col(aes(fill=substr(label, 1, 1))) + no_legend() +
#  coord_flip() + no_y_axis()
#gg_heat <- ggtreeplot(gg_tr, df2, aes(x=category)) + geom_tile(aes(fill=value)) +
#  scale_fill_gradient2() + no_legend() + no_y_axis()
#
#gg_tr + gg_hist + gg_heat + plot_annotation(tag_levels="A")
#
#ggsave("img/ggtree-composite-3.png", type='cairo', width=8, height=4)
gg_plungedistinct<-function(index2, letter, box = "yes"){
ggtreeplot(gg_tr, subset(longdfplotting,
longdfplotting$earmeasuresresid==yvarnames[index2]), aes(y=earmeasureval), flip=TRUE) +
geom_point(aes(), size = 2,shape = 21, col = "black")+
scale_fill_manual(values = cbbPalette)+
coord_flip() + no_y_axis()+
ylab("")+
#xlim(-3.5,26.5)+
geom_hline(yintercept = 0, col = "grey")+
theme_classic() +
theme(axis.line.y = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.x = element_text(angle = 90),
legend.position = "none",
plot.margin = margin(t = 0, r = 0, b = 0, l = 0, unit = "pt"))
}
gg_plungedistinct(1, letter = "K",box = "no")
ggtreeplot(gg_tr, subset(longdfplotting,
longdfplotting$earmeasuresresid==yvarnames[index2]), aes(y=earmeasureval), flip=TRUE) +
geom_point(aes(), size = 2,shape = 21, col = "black")+
scale_fill_manual(values = cbbPalette)
gg_tr|addbxplt(1,1,"a")+addbxplt(2,2,"b")|
addbxplt(3,3,"c")+addbxplt(4,4,"d")
addbxplt<-function(j,index2,letter,box = "yes"){
d<-gg_plungedistinct(index2,letter,box)+
geom_boxplot(data = subset(longdfplotting,
longdfplotting$earmeasuresresid==yvarnames[j]&
longdfplotting$plungedistinct=="Plunging"),
aes(x = -2, y = earmeasureval),fill= "black",outlier.size = 2,
outlier.fill = "#000000", outlier.shape = 21, outlier.color = "black")+
geom_boxplot(data = subset(longdfplotting,
longdfplotting$earmeasuresresid==yvarnames[j]&
longdfplotting$plungedistinct=="Underwater pursuit"),
aes(x = -3, y = earmeasureval),fill ="#56B4E9",outlier.size = 2,
outlier.fill = "#56B4E9", outlier.shape = 21, outlier.color = "black")+
geom_boxplot(data = subset(longdfplotting,
longdfplotting$earmeasuresresid==yvarnames[j]&
longdfplotting$plungedistinct=="Surface"),
mapping = aes(x = -1, y = earmeasureval), fill = "#E69F00",
outlier.size = 2, outlier.fill = "#E69F00", outlier.shape = 21, outlier.color = "black")
d
}
#one row, modified proportions
gg_tr|addbxplt(1,1,"a")+addbxplt(2,2,"b")
addbxplt(1,1,"a")
gg_plungedistinct<-function(index2, letter, box = "yes"){
ggtreeplot(gg_tr, subset(longdfplotting,
longdfplotting$earmeasuresresid==yvarnames[index2]), aes(y=earmeasureval), flip=TRUE) +
geom_point(aes(), size = 2,shape = 21, col = "black")+
scale_fill_manual(values = cbbPalette)+
coord_flip() + no_y_axis()+
ylab("")+
#xlim(-3.5,26.5)+
geom_hline(yintercept = 0, col = "grey")+
theme_classic() +
theme(axis.line.y = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.x = element_text(angle = 90),
legend.position = "none",
plot.margin = margin(t = 0, r = 0, b = 0, l = 0, unit = "pt"))
}
gg_plungedistinct(1, letter = "K",box = "no")
ggtreeplot(gg_tr, subset(longdfplotting,
longdfplotting$earmeasuresresid==yvarnames[index2]), aes(y=earmeasureval), flip=TRUE) +
geom_point(aes(), size = 2,shape = 21, col = "black")+
scale_fill_manual(values = cbbPalette)+
coord_flip() + no_y_axis()+
#ylab("")+
#xlim(-3.5,26.5)+
geom_hline(yintercept = 0, col = "grey")
ggtreeplot(gg_tr, subset(longdfplotting,
longdfplotting$earmeasuresresid==yvarnames[index2]), aes(y=earmeasureval), flip=TRUE) +
geom_point(aes(), size = 2,shape = 21, col = "black")+
scale_fill_manual(values = cbbPalette)+
coord_flip() + no_y_axis()+
#ylab("")+
xlim(1:10)
ggtreeplot(gg_tr, subset(longdfplotting,
longdfplotting$earmeasuresresid==yvarnames[index2]), aes(y=earmeasureval), flip=TRUE) +
geom_point(aes(), size = 2,shape = 21, col = "black")+
scale_fill_manual(values = cbbPalette)
ggtreeplot(gg_tr, subset(longdfplotting,
longdfplotting$earmeasuresresid==yvarnames[index2]), aes(y=earmeasureval), flip=TRUE) +
geom_point(aes(), size = 2,shape = 21, col = "black")
tree_ylim(ggtree(orderPhy))
str(ggtree(orderPhy))
gg_tr <- ggtree(orderPhy, branch.length = "none") +
geom_tiplab(align=TRUE) +
#scale_x_continuous(expand=expand_scale(0.2)) + # make more room for the labels
scale_y_tree()
#xlim(0,40)+
#ylim(-3.5,26.5)+
gg_tr
subset(longdfplotting,
longdfplotting$earmeasuresresid==yvarnames[index2])
longdfplotting$label<-longdfplotting$superorder
gg_plungedistinct<-function(index2, letter, box = "yes"){
ggtreeplot(gg_tr, subset(longdfplotting,
longdfplotting$earmeasuresresid==yvarnames[index2]), aes(y=earmeasureval), flip=TRUE) +
geom_point(aes(), size = 2,shape = 21, col = "black")+
scale_fill_manual(values = cbbPalette)+
coord_flip() + no_y_axis()+
#ylab("")+
xlim(1:10)+
geom_hline(yintercept = 0, col = "grey")+
theme_classic() +
theme(axis.line.y = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.x = element_text(angle = 90),
legend.position = "none",
plot.margin = margin(t = 0, r = 0, b = 0, l = 0, unit = "pt"))
}
gg_plungedistinct(1, letter = "K",box = "no")
c(1,10)
gg_plungedistinct<-function(index2, letter, box = "yes"){
ggtreeplot(gg_tr, subset(longdfplotting,
longdfplotting$earmeasuresresid==yvarnames[index2]), aes(y=earmeasureval), flip=TRUE) +
geom_point(aes(), size = 2,shape = 21, col = "black")+
scale_fill_manual(values = cbbPalette)+
coord_flip() + no_y_axis()+
#ylab("")+
xlim(c(1,10))+
geom_hline(yintercept = 0, col = "grey")+
theme_classic() +
theme(axis.line.y = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.x = element_text(angle = 90),
legend.position = "none",
plot.margin = margin(t = 0, r = 0, b = 0, l = 0, unit = "pt"))
}
gg_plungedistinct(1, letter = "K",box = "no")
gg_tr|addbxplt(1,1,"a")+addbxplt(2,2,"b")
gg_tr|gg_plungedistinct(1,"a")+gg_plungedistinct(2,"b")|
gg_plungedistinct(3,"c")+gg_plungedistinct(4,"d")|#
gg_plungedistinct(5,"e")+gg_plungedistinct(6,"f")
gg_tr|gg_plungedistinct(1,"a")+gg_plungedistinct(2,"b")|
gg_plungedistinct(3,"c")+gg_plungedistinct(4,"d")|#
gg_plungedistinct(5,"e")+gg_plungedistinct(6,"f")|#umbo height and TM angle
gg_plungedistinct(8,"g")+gg_plungedistinct(9,"h", box = "no")|#ESlength & RW
gg_plungedistinct(7,"i")+gg_plungedistinct(11,"j")|#CA and collenght
gg_plungedistinct(12,"k", box = "no")+gg_plungedistinct(10,"l")
gg_tr <- ggtree(orderPhy, branch.length = "none") +
geom_tiplab(align=TRUE) +
#scale_x_continuous(expand=expand_scale(0.2)) + # make more room for the labels
scale_y_tree()
xlim(0,40)+
ylim(-3.5,26.5)+
gg_tr
gg_tr <- ggtree(orderPhy, branch.length = "none") +
geom_tiplab(align=TRUE) +
#scale_x_continuous(expand=expand_scale(0.2)) + # make more room for the labels
scale_y_tree() +
xlim(0,40)+
ylim(-3.5,26.5)+
gg_tr
gg_tr <- ggtree(orderPhy, branch.length = "none") +
geom_tiplab(align=TRUE) +
#scale_x_continuous(expand=expand_scale(0.2)) + # make more room for the labels
scale_y_tree() +
xlim(0,40)+
ylim(-3.5,26.5)
gg_tr
gg_tr <- ggtree(orderPhy, branch.length = "none") +
geom_tiplab(align=TRUE) +
#scale_x_continuous(expand=expand_scale(0.2)) + # make more room for the labels
scale_y_tree() +
xlim(0,40)
#ylim(-3.5,26.5)
gg_tr
gg_tr|gg_plungedistinct(1,"a")+gg_plungedistinct(2,"b")|
gg_plungedistinct(3,"c")+gg_plungedistinct(4,"d"
)
yvarnames
gg_plungedistinct(13, letter = "K",box = "no")
names(residseach)
residseach$PC1<-dfwithresids$PC1
residseach$PC1
dfwithresids$PC1
gg_tr|gg_plungedistinct(1,"a")+gg_plungedistinct(2,"b")|
gg_plungedistinct(3,"c")+gg_plungedistinct(4,"d")|#
gg_plungedistinct(5,"e")+gg_plungedistinct(6,"f")|#umbo height and TM angle
gg_plungedistinct(8,"g")+gg_plungedistinct(9,"h", box = "no")|#ESlength & RW
gg_plungedistinct(7,"i")+gg_plungedistinct(11,"j")|#CA and collenght
gg_plungedistinct(12,"k", box = "no")+gg_plungedistinct(10,"l")
runit("FPtotalarea","TMtotalarea","Order")
runit("FPtotalarea","RWtotalarea","superorder")
df$RW_FP<-df$RWtotalarea/df$FPtotalarea
names(df)
runit("Head.mass..g.","area_ratio","superorder")
runit("Head.mass..g.","totalEClength","superorder")#EC length
runit("Head.mass..g.","Behind.TM","superorder")#cranial air volume
runit("area_ratio","dis_coltip_TMcentroid","superorder")
names(df)
runit("area_ratio","meanTMangle","superorder")
runit("meanTMangle","TMtotalarea","superorder")
runit("FPtotalarea","RWtotalarea","superorder")
names(df)
runit("FPtotalarea","columella.volume.mm3","Order")
runit("FPtotalarea","Columella.volume.mm3","Order")
runit<-function(x,y,group){
xl<-paste0("log(",x,")")
yl<-paste0("log(",y,")")
ggplot(df, aes_string(x = xl, y = yl))+
geom_point(aes_string(color =group))+
geom_smooth(aes_string(col = group), method = "lm", se = F)+
theme_bw()
#scale_color_brewer(palette = "Paired")
}
runit("FPtotalarea","Columella.volume.mm3","Order")
runit("Columella.volume.mm3","FPtotalarea","Order")
runit<-function(x,y,group){
xl<-paste0("log(",x,")")
yl<-paste0("log(",y,")")
ggplot(df, aes_string(x = xl, y = yl))+
geom_point(aes_string(color =group))+
geom_smooth(aes_string(col = group), method = "lm", se = F)+
theme_bw()+
geom_encircle(aes(fill = group))
#scale_color_brewer(palette = "Paired")
}
runit("Columella.volume.mm3","FPtotalarea","Order")
runit("Head.mass..g.","RW_FP","superorder")#cranial air volume
runit<-function(x,y,group){
xl<-paste0("log(",x,")")
yl<-paste0("log(",y,")")
ggplot(df, aes_string(x = xl, y = yl))+
geom_point(aes_string(color =group))+
geom_smooth(aes_string(col = group), method = "lm", se = F)+
theme_bw()
#geom_encircle(aes(fill = group))
#scale_color_brewer(palette = "Paired")
}
df$RW_FP<-df$RWtotalarea/df$FPtotalarea
runit("Head.mass..g.","RW_FP","superorder")#cranial air volume
df$percentcart<-df$totalEClength/(df$totalEClength+df$Columella.length.mm)
runit("Head.mass..g.","percentcart","superorder")#cranial air volume
runitlogx<-function(x,y,group){
xl<-paste0("log(",x,")")
yl<-y
ggplot(df, aes_string(x = xl, y = yl))+
geom_point(aes_string(color =group))+
geom_smooth(aes_string(col = group), method = "lm", se = F)+
theme_bw()
#geom_encircle(aes(fill = group))
#scale_color_brewer(palette = "Paired")
}
runitlogx("Head.mass..g.","percentcart","superorder")#cranial air volume
runitlogx("Head.mass..g.","area_ratio","superorder")#cranial air volume
runit("Head.mass..g.","RW_FP","superorder")#cranial air volume
runitlogx("Head.mass..g.","RW_FP","superorder")#cranial air volume
runit("TMtotalarea","dis_coltip_TMcentroid","superorder")
